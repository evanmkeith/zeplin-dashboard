{
  "version": 3,
  "sources": ["../../axios-rate-limit/src/index.js"],
  "sourcesContent": ["function AxiosRateLimit (axios) {\n  this.queue = []\n  this.timeslotRequests = 0\n\n  this.interceptors = {\n    request: null,\n    response: null\n  }\n\n  this.handleRequest = this.handleRequest.bind(this)\n  this.handleResponse = this.handleResponse.bind(this)\n\n  this.enable(axios)\n}\n\nAxiosRateLimit.prototype.getMaxRPS = function () {\n  var perSeconds = (this.perMilliseconds / 1000)\n  return this.maxRequests / perSeconds\n}\n\nAxiosRateLimit.prototype.setMaxRPS = function (rps) {\n  this.setRateLimitOptions({\n    maxRequests: rps,\n    perMilliseconds: 1000\n  })\n}\n\nAxiosRateLimit.prototype.setRateLimitOptions = function (options) {\n  if (options.maxRPS) {\n    this.setMaxRPS(options.maxRPS)\n  } else {\n    this.perMilliseconds = options.perMilliseconds\n    this.maxRequests = options.maxRequests\n  }\n}\n\nAxiosRateLimit.prototype.enable = function (axios) {\n  function handleError (error) {\n    return Promise.reject(error)\n  }\n\n  this.interceptors.request = axios.interceptors.request.use(\n    this.handleRequest,\n    handleError\n  )\n  this.interceptors.response = axios.interceptors.response.use(\n    this.handleResponse,\n    handleError\n  )\n}\n\nAxiosRateLimit.prototype.handleRequest = function (request) {\n  return new Promise(function (resolve) {\n    this.push({ resolve: function () { resolve(request) } })\n  }.bind(this))\n}\n\nAxiosRateLimit.prototype.handleResponse = function (response) {\n  this.shift()\n  return response\n}\n\nAxiosRateLimit.prototype.push = function (requestHandler) {\n  this.queue.push(requestHandler)\n  this.shiftInitial()\n}\n\nAxiosRateLimit.prototype.shiftInitial = function () {\n  setTimeout(function () { return this.shift() }.bind(this), 0)\n}\n\nAxiosRateLimit.prototype.shift = function () {\n  if (!this.queue.length) return\n  if (this.timeslotRequests === this.maxRequests) {\n    if (this.timeoutId && typeof this.timeoutId.ref === 'function') {\n      this.timeoutId.ref()\n    }\n\n    return\n  }\n\n  var queued = this.queue.shift()\n  queued.resolve()\n\n  if (this.timeslotRequests === 0) {\n    this.timeoutId = setTimeout(function () {\n      this.timeslotRequests = 0\n      this.shift()\n    }.bind(this), this.perMilliseconds)\n\n    if (typeof this.timeoutId.unref === 'function') {\n      if (this.queue.length === 0) this.timeoutId.unref()\n    }\n  }\n\n  this.timeslotRequests += 1\n}\n\n/**\n * Apply rate limit to axios instance.\n *\n * @example\n *   import axios from 'axios';\n *   import rateLimit from 'axios-rate-limit';\n *\n *   // sets max 2 requests per 1 second, other will be delayed\n *   // note maxRPS is a shorthand for perMilliseconds: 1000, and it takes precedence\n *   // if specified both with maxRequests and perMilliseconds\n *   const http = rateLimit(axios.create(), { maxRequests: 2, perMilliseconds: 1000, maxRPS: 2 })\n*    http.getMaxRPS() // 2\n *   http.get('https://example.com/api/v1/users.json?page=1') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=2') // will perform immediately\n *   http.get('https://example.com/api/v1/users.json?page=3') // will perform after 1 second from the first one\n *   http.setMaxRPS(3)\n *   http.getMaxRPS() // 3\n *   http.setRateLimitOptions({ maxRequests: 6, perMilliseconds: 150 }) // same options as constructor\n *\n * @param {Object} axios axios instance\n * @param {Object} options options for rate limit, available for live update\n * @param {Number} options.maxRequests max requests to perform concurrently in given amount of time.\n * @param {Number} options.perMilliseconds amount of time to limit concurrent requests.\n * @returns {Object} axios instance with interceptors added\n */\nfunction axiosRateLimit (axios, options) {\n  var rateLimitInstance = new AxiosRateLimit(axios)\n  rateLimitInstance.setRateLimitOptions(options)\n\n  axios.getMaxRPS = AxiosRateLimit.prototype.getMaxRPS.bind(rateLimitInstance)\n  axios.setMaxRPS = AxiosRateLimit.prototype.setMaxRPS.bind(rateLimitInstance)\n  axios.setRateLimitOptions = AxiosRateLimit.prototype.setRateLimitOptions\n    .bind(rateLimitInstance)\n\n  return axios\n}\n\nmodule.exports = axiosRateLimit\n"],
  "mappings": "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",
  "names": []
}
